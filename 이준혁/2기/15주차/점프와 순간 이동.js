function solution(n)
{
    // 한 번에 K칸을 앞으로 점프하거나 이동한거리x2로 순간이동하는 슈트
    // 점프는 K만큼의 건전지, 순간이동은 건전지 안듬
    // N만큼 떨어진 장소를 갈 때 최소 건전지 사용량을 리턴
    // 건전지가 들지 않는 로직은 순간이동이므로, 최대한 순간이동을 많이 해야한다.
    // 최종 목적지(뒤)에서 반씩 줄여갈 수 있는 상황, 즉 짝수인 경우에는 순간이동을
    // 홀수인 경우에는 1칸의 점프를 반복한다면 최소한의 건전지를 사용할 수 있을 것이라 판단
    let ans = 0;

    while (true) {
        if (n === 1) { // 반복문 종료 조건, 1인 경우 마지막 한 칸을 점프하면 출발지로 돌아온다.
            ans++; // 그 값을 더해줘서
            return ans; // 출력
        }

        if (n % 2 === 0) { // 짝수일 때,
            n = n / 2; // 반으로 줄인 값을 넣어 순간이동을 처리
        } else { // 홀수라면
            ans++; // 한 칸을 점프하고
            n--; // 짝수로 만들어준다.
        }
    }
}
