import java.util.Scanner;
import java.util.Stack;

public class 탑 {

	public static void main(String[] args) {
		
		/*
		어떻게 풀어야할까?
		stack은 LIFO ( Last in First Out )의 구조를 가지고 있다.
		push하면 삽입 / pop하면 삭제 ( 삽입과 삭제는 o(1) )
		( 검색은 O(n) )

		1 2 3 4 5 번째 ( N은 입력값 )
		6 9 5 7 4
		
		스택의 사이즈만큼 배열의 가변성을 만들어주고,
		pop()을 한 값과 peek()를 한 값을 비교해 pop() 값이 더 작다면
		레이저 신호를 수신했으므로 size()를 통해서 결과를 얻으면 되겠구나
		*/

  // 문제점 : stack.peek()가 0일 때, 조건식 안에 들어가있는 경우가 있어서 첫 번째, 두 번째를 제외한 나머지가 오류 발생
		
		Stack<Integer> stack = new Stack<>(); // 예제 입력이 들어갈 스택
		Stack<Integer> str = new Stack<>(); // 임시로 담을 스택
		
		Scanner sc = new Scanner(System.in);
		
		int N = sc.nextInt(); // N번을 입력받는다.
		
		int[] arr = new int[N]; // 같은 크기의 배열 선언
		
		for (int i=0; i<N; i++) { // stack에 입력값을 넣어준다.
			int top = sc.nextInt();
			stack.push(top);
		}
		
		for (int i=stack.size()-1; i>0; i--) { // 반복문을 반대로 진행
			int mer = stack.pop(); // pop한 값을 mer에 임시 저장
			
			if ( stack.size() > 1 ) { // 스택 안에 크기가 2 이상일 때,
				while ( !(mer < stack.peek()) ) { // mer가 더 크면 계속 반복
					str.push(stack.pop()); // 마지막에 뺀값을 str 스택에 임시 저장해준다.
				}
							
				if ( mer < stack.peek() ) { // 조건을 만족했을 때
					arr[i] = stack.size(); // 답을 출력할 arr에 역순으로 위치(크기)를 저장해준다.
				}
				while ( ! (str.empty()) ) { // 만약 str에 임시저장한 값이 있다면
					stack.push(str.pop()); // stack에 다시 되돌려줘서 모든 값들을 검사할 수 있게 한다.
				}
			} 
			
			if ( i <= 1 ) { // 단, 이 조건 하에서는 stack.peek가 0일 때 오류가 발생해서 예외로 처리
				if ( mer < stack.peek() ) { // 
					arr[i] = stack.size(); // 첫 번째 값과 두 번째 대한 값 역시 저장해준다.
				}
			}
		}
		
		for (int i=0; i<N; i++) {
			System.out.print(arr[i]+" ");
		}
	}
}
