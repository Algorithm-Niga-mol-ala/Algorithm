package ddss;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Stack;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int N = Integer.parseInt(br.readLine());
		
		String[] str = br.readLine().split(" ");
		//br.readLine()으로 받은 String을 split으로 " " 기준으로 나눔
		
		Stack<Integer> tower = new Stack<>();
		//마지막 요소를 기준으로 비교를 시작하니까 Stack을 사용해봄
		
		Stack<Integer> seq = new Stack<>();
		
		Stack<Integer> tmp = new Stack<>();
		
		int[] record = new int[N];
		
		for(int i =0; i<N ; i++) {
			tower.push(Integer.parseInt(str[i]));
			seq.push(Integer.parseInt(str[i]));
		}//6 9 5 7 4 순서로 스택에 들어가 있음
		
		for(int i=0; i<N-1; i++) {//마지막 탑에서는 어차피 0이므로 N-1번 반복
			int num = tower.pop();
			while(!tower.isEmpty()) {//tower가 빌 때까지 반복
				if(tower.peek()>num) {//pop으로 뽑고난 이후 스택의 맨 위가 뭔지 보고
					
					//search(Object o)는 o의 스택상의 위치를 알려줌 6 9 5 7 4 인데 search(4)를 하면 1 9를 하면 4가 반환
					//문제에서는 탑이 스택 바닥부터 1 2 3 4 5 로 불리고 있으니까 N-search(Object o)로 해당하는 인덱스를 찾아서 record 배열에 넣어줌
					
					record[N-seq.search(num)]=(N+1-seq.search(tower.peek()));
					//record 배열의 []번 인덱스에 tower.peek()한 값의 stack에서의 위치를 찾아서 N+1에서 뺀 뒤 넣어줌
					//첫 번째 반복에서는 4가 pop() 되고 그 다음에 7이 peek()이 되어서 if가 실행 되는데 record의 [5-(seq.search(4)) ]인 4번 인덱스에 (5+1-(seq.search(7)=2)) 값인 4가 들어감
					break;
				}else {//peek()한 값이 num보다 작으면 빼서 tmp에 저장
						tmp.push(tower.pop()); //그럼 다음 반복때 pop된 것의 다음 스택 값이 peek()이 됨
					}
			}//while 의 끝
			if(tower.isEmpty()) {//towel가 비어있을 경우는 왼쪽에 num보다 큰 탑이 없는 경우 이므로
				record[N-seq.search(num)]=0; //record에 0을 넣음
			}
			while(!tmp.isEmpty()) {//tmp에 저장했던 값을 다시 tower에 넣고 반복
				tower.push(tmp.pop());
			}
		}//for의 끝
		//record에 각 탑에서 보낸 신호를 받는 탑의 번호가 들어있음
		
		for(int i=0; i<N; i++) {
			bw.write(record[i]+" ");
		}
		bw.flush();
		bw.close();
		br.close();
	}
}
