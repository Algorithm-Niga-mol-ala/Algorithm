import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Stack;

public class Main {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int N = Integer.parseInt(br.readLine());
		
		String[] str = br.readLine().split(" ");
		//br.readLine()으로 받은 String을 split으로 " " 기준으로 나눔
		
		Stack<int[]> tower = new Stack<>();
    //tower에는 int[]{높이, 인덱스}가 들어가게 함
  
		//마지막 요소를 기준으로 비교를 시작하니까 Stack을 사용해봄
		
		//어차피 왼쪽의 요소 먼저 들어온 요소들과 비교할 거니까  stack 에 미리 받아놓을 필요가 없음
    //6 9 5 7 4   에서 6은 비교할 대상이 없고 9는 6이랑만 비교할 수 있고 뒤에 9가 들어오면 9보다 작은 6에는 닿을 수 없음
  
		for(int i=1; i<=N ; i++) {
			int height =Integer.parseInt(str[i-1]); //str[i] 번 째 인덱스를 height에 담아둠
   
			while(!tower.isEmpty()) {//스택이 빌 때까지 반복하거나 if가 실행되면 break
   
				if(tower.peek()[0]>height) {
          
					bw.write(tower.peek()[1]+" ");//지금 탑보다 왼쪽 탑의 높이가 높다면 그 탑의 인덱스를 버퍼에 올림
     
					break; //반복을 멈추고 새로운 탑을 받음
     
				}else {//왼쪽의 탑이 지금의 탑보다 낮다면 그 뒤에 들어오는 탑의 신호는 그 탑에 어차피 갈 수 없으므로
					
     tower.pop();
					
				}
			}
			if(tower.isEmpty()) {//스택이 비어있다면 왼쪽에 height 보다 높은 탑이 없다는 것이므로 0을 넣음
				bw.write(0+" ");
			}
			//위는 스택에 들어온 탑과 이미 있는 탑들의 비교
			tower.push(new int[] {Integer.parseInt(str[i-1]),i});
			//비교가 끝난 탑은 다음 비교를 위해 스택에 push
		}
		bw.flush();
		bw.close();
		br.close();
		
	}
}
